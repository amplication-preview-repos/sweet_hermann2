/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Greenhouse } from "./Greenhouse";
import { GreenhouseCountArgs } from "./GreenhouseCountArgs";
import { GreenhouseFindManyArgs } from "./GreenhouseFindManyArgs";
import { GreenhouseFindUniqueArgs } from "./GreenhouseFindUniqueArgs";
import { CreateGreenhouseArgs } from "./CreateGreenhouseArgs";
import { UpdateGreenhouseArgs } from "./UpdateGreenhouseArgs";
import { DeleteGreenhouseArgs } from "./DeleteGreenhouseArgs";
import { FieldModelFindManyArgs } from "../../fieldModel/base/FieldModelFindManyArgs";
import { FieldModel } from "../../fieldModel/base/FieldModel";
import { Farm } from "../../farm/base/Farm";
import { GreenhouseService } from "../greenhouse.service";
@graphql.Resolver(() => Greenhouse)
export class GreenhouseResolverBase {
  constructor(protected readonly service: GreenhouseService) {}

  async _greenhousesMeta(
    @graphql.Args() args: GreenhouseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Greenhouse])
  async greenhouses(
    @graphql.Args() args: GreenhouseFindManyArgs
  ): Promise<Greenhouse[]> {
    return this.service.greenhouses(args);
  }

  @graphql.Query(() => Greenhouse, { nullable: true })
  async greenhouse(
    @graphql.Args() args: GreenhouseFindUniqueArgs
  ): Promise<Greenhouse | null> {
    const result = await this.service.greenhouse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Greenhouse)
  async createGreenhouse(
    @graphql.Args() args: CreateGreenhouseArgs
  ): Promise<Greenhouse> {
    return await this.service.createGreenhouse({
      ...args,
      data: {
        ...args.data,

        farm: args.data.farm
          ? {
              connect: args.data.farm,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Greenhouse)
  async updateGreenhouse(
    @graphql.Args() args: UpdateGreenhouseArgs
  ): Promise<Greenhouse | null> {
    try {
      return await this.service.updateGreenhouse({
        ...args,
        data: {
          ...args.data,

          farm: args.data.farm
            ? {
                connect: args.data.farm,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Greenhouse)
  async deleteGreenhouse(
    @graphql.Args() args: DeleteGreenhouseArgs
  ): Promise<Greenhouse | null> {
    try {
      return await this.service.deleteGreenhouse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [FieldModel], { name: "fields" })
  async findFields(
    @graphql.Parent() parent: Greenhouse,
    @graphql.Args() args: FieldModelFindManyArgs
  ): Promise<FieldModel[]> {
    const results = await this.service.findFields(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Farm, {
    nullable: true,
    name: "farm",
  })
  async getFarm(@graphql.Parent() parent: Greenhouse): Promise<Farm | null> {
    const result = await this.service.getFarm(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
