/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GreenhouseService } from "../greenhouse.service";
import { GreenhouseCreateInput } from "./GreenhouseCreateInput";
import { Greenhouse } from "./Greenhouse";
import { GreenhouseFindManyArgs } from "./GreenhouseFindManyArgs";
import { GreenhouseWhereUniqueInput } from "./GreenhouseWhereUniqueInput";
import { GreenhouseUpdateInput } from "./GreenhouseUpdateInput";
import { FieldModelFindManyArgs } from "../../fieldModel/base/FieldModelFindManyArgs";
import { FieldModel } from "../../fieldModel/base/FieldModel";
import { FieldModelWhereUniqueInput } from "../../fieldModel/base/FieldModelWhereUniqueInput";

export class GreenhouseControllerBase {
  constructor(protected readonly service: GreenhouseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Greenhouse })
  async createGreenhouse(
    @common.Body() data: GreenhouseCreateInput
  ): Promise<Greenhouse> {
    return await this.service.createGreenhouse({
      data: {
        ...data,

        farm: data.farm
          ? {
              connect: data.farm,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Greenhouse] })
  @ApiNestedQuery(GreenhouseFindManyArgs)
  async greenhouses(@common.Req() request: Request): Promise<Greenhouse[]> {
    const args = plainToClass(GreenhouseFindManyArgs, request.query);
    return this.service.greenhouses({
      ...args,
      select: {
        createdAt: true,

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Greenhouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async greenhouse(
    @common.Param() params: GreenhouseWhereUniqueInput
  ): Promise<Greenhouse | null> {
    const result = await this.service.greenhouse({
      where: params,
      select: {
        createdAt: true,

        farm: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Greenhouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGreenhouse(
    @common.Param() params: GreenhouseWhereUniqueInput,
    @common.Body() data: GreenhouseUpdateInput
  ): Promise<Greenhouse | null> {
    try {
      return await this.service.updateGreenhouse({
        where: params,
        data: {
          ...data,

          farm: data.farm
            ? {
                connect: data.farm,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          farm: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Greenhouse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGreenhouse(
    @common.Param() params: GreenhouseWhereUniqueInput
  ): Promise<Greenhouse | null> {
    try {
      return await this.service.deleteGreenhouse({
        where: params,
        select: {
          createdAt: true,

          farm: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/fields")
  @ApiNestedQuery(FieldModelFindManyArgs)
  async findFields(
    @common.Req() request: Request,
    @common.Param() params: GreenhouseWhereUniqueInput
  ): Promise<FieldModel[]> {
    const query = plainToClass(FieldModelFindManyArgs, request.query);
    const results = await this.service.findFields(params.id, {
      ...query,
      select: {
        createdAt: true,

        greenhouse: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fields")
  async connectFields(
    @common.Param() params: GreenhouseWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        connect: body,
      },
    };
    await this.service.updateGreenhouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fields")
  async updateFields(
    @common.Param() params: GreenhouseWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        set: body,
      },
    };
    await this.service.updateGreenhouse({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fields")
  async disconnectFields(
    @common.Param() params: GreenhouseWhereUniqueInput,
    @common.Body() body: FieldModelWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fields: {
        disconnect: body,
      },
    };
    await this.service.updateGreenhouse({
      where: params,
      data,
      select: { id: true },
    });
  }
}
