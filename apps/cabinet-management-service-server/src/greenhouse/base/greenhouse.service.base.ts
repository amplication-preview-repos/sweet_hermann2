/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Greenhouse as PrismaGreenhouse,
  FieldModel as PrismaFieldModel,
  Farm as PrismaFarm,
} from "@prisma/client";

export class GreenhouseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GreenhouseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.greenhouse.count(args);
  }

  async greenhouses<T extends Prisma.GreenhouseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreenhouseFindManyArgs>
  ): Promise<PrismaGreenhouse[]> {
    return this.prisma.greenhouse.findMany<Prisma.GreenhouseFindManyArgs>(args);
  }
  async greenhouse<T extends Prisma.GreenhouseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreenhouseFindUniqueArgs>
  ): Promise<PrismaGreenhouse | null> {
    return this.prisma.greenhouse.findUnique(args);
  }
  async createGreenhouse<T extends Prisma.GreenhouseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreenhouseCreateArgs>
  ): Promise<PrismaGreenhouse> {
    return this.prisma.greenhouse.create<T>(args);
  }
  async updateGreenhouse<T extends Prisma.GreenhouseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreenhouseUpdateArgs>
  ): Promise<PrismaGreenhouse> {
    return this.prisma.greenhouse.update<T>(args);
  }
  async deleteGreenhouse<T extends Prisma.GreenhouseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreenhouseDeleteArgs>
  ): Promise<PrismaGreenhouse> {
    return this.prisma.greenhouse.delete(args);
  }

  async findFields(
    parentId: string,
    args: Prisma.FieldModelFindManyArgs
  ): Promise<PrismaFieldModel[]> {
    return this.prisma.greenhouse
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fields(args);
  }

  async getFarm(parentId: string): Promise<PrismaFarm | null> {
    return this.prisma.greenhouse
      .findUnique({
        where: { id: parentId },
      })
      .farm();
  }
}
