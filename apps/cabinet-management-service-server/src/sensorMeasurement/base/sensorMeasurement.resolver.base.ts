/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SensorMeasurement } from "./SensorMeasurement";
import { SensorMeasurementCountArgs } from "./SensorMeasurementCountArgs";
import { SensorMeasurementFindManyArgs } from "./SensorMeasurementFindManyArgs";
import { SensorMeasurementFindUniqueArgs } from "./SensorMeasurementFindUniqueArgs";
import { CreateSensorMeasurementArgs } from "./CreateSensorMeasurementArgs";
import { UpdateSensorMeasurementArgs } from "./UpdateSensorMeasurementArgs";
import { DeleteSensorMeasurementArgs } from "./DeleteSensorMeasurementArgs";
import { Sensor } from "../../sensor/base/Sensor";
import { SensorMeasurementService } from "../sensorMeasurement.service";
@graphql.Resolver(() => SensorMeasurement)
export class SensorMeasurementResolverBase {
  constructor(protected readonly service: SensorMeasurementService) {}

  async _sensorMeasurementsMeta(
    @graphql.Args() args: SensorMeasurementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SensorMeasurement])
  async sensorMeasurements(
    @graphql.Args() args: SensorMeasurementFindManyArgs
  ): Promise<SensorMeasurement[]> {
    return this.service.sensorMeasurements(args);
  }

  @graphql.Query(() => SensorMeasurement, { nullable: true })
  async sensorMeasurement(
    @graphql.Args() args: SensorMeasurementFindUniqueArgs
  ): Promise<SensorMeasurement | null> {
    const result = await this.service.sensorMeasurement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SensorMeasurement)
  async createSensorMeasurement(
    @graphql.Args() args: CreateSensorMeasurementArgs
  ): Promise<SensorMeasurement> {
    return await this.service.createSensorMeasurement({
      ...args,
      data: {
        ...args.data,

        sensor: args.data.sensor
          ? {
              connect: args.data.sensor,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SensorMeasurement)
  async updateSensorMeasurement(
    @graphql.Args() args: UpdateSensorMeasurementArgs
  ): Promise<SensorMeasurement | null> {
    try {
      return await this.service.updateSensorMeasurement({
        ...args,
        data: {
          ...args.data,

          sensor: args.data.sensor
            ? {
                connect: args.data.sensor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SensorMeasurement)
  async deleteSensorMeasurement(
    @graphql.Args() args: DeleteSensorMeasurementArgs
  ): Promise<SensorMeasurement | null> {
    try {
      return await this.service.deleteSensorMeasurement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Sensor, {
    nullable: true,
    name: "sensor",
  })
  async getSensor(
    @graphql.Parent() parent: SensorMeasurement
  ): Promise<Sensor | null> {
    const result = await this.service.getSensor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
