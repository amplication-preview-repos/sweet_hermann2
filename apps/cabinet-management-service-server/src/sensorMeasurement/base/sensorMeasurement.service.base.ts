/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SensorMeasurement as PrismaSensorMeasurement,
  Sensor as PrismaSensor,
} from "@prisma/client";

export class SensorMeasurementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SensorMeasurementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sensorMeasurement.count(args);
  }

  async sensorMeasurements<T extends Prisma.SensorMeasurementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorMeasurementFindManyArgs>
  ): Promise<PrismaSensorMeasurement[]> {
    return this.prisma.sensorMeasurement.findMany<Prisma.SensorMeasurementFindManyArgs>(
      args
    );
  }
  async sensorMeasurement<T extends Prisma.SensorMeasurementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorMeasurementFindUniqueArgs>
  ): Promise<PrismaSensorMeasurement | null> {
    return this.prisma.sensorMeasurement.findUnique(args);
  }
  async createSensorMeasurement<T extends Prisma.SensorMeasurementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorMeasurementCreateArgs>
  ): Promise<PrismaSensorMeasurement> {
    return this.prisma.sensorMeasurement.create<T>(args);
  }
  async updateSensorMeasurement<T extends Prisma.SensorMeasurementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorMeasurementUpdateArgs>
  ): Promise<PrismaSensorMeasurement> {
    return this.prisma.sensorMeasurement.update<T>(args);
  }
  async deleteSensorMeasurement<T extends Prisma.SensorMeasurementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SensorMeasurementDeleteArgs>
  ): Promise<PrismaSensorMeasurement> {
    return this.prisma.sensorMeasurement.delete(args);
  }

  async getSensor(parentId: string): Promise<PrismaSensor | null> {
    return this.prisma.sensorMeasurement
      .findUnique({
        where: { id: parentId },
      })
      .sensor();
  }
}
