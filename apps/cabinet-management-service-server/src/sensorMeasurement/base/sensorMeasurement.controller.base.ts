/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SensorMeasurementService } from "../sensorMeasurement.service";
import { SensorMeasurementCreateInput } from "./SensorMeasurementCreateInput";
import { SensorMeasurement } from "./SensorMeasurement";
import { SensorMeasurementFindManyArgs } from "./SensorMeasurementFindManyArgs";
import { SensorMeasurementWhereUniqueInput } from "./SensorMeasurementWhereUniqueInput";
import { SensorMeasurementUpdateInput } from "./SensorMeasurementUpdateInput";

export class SensorMeasurementControllerBase {
  constructor(protected readonly service: SensorMeasurementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SensorMeasurement })
  async createSensorMeasurement(
    @common.Body() data: SensorMeasurementCreateInput
  ): Promise<SensorMeasurement> {
    return await this.service.createSensorMeasurement({
      data: {
        ...data,

        sensor: data.sensor
          ? {
              connect: data.sensor,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SensorMeasurement] })
  @ApiNestedQuery(SensorMeasurementFindManyArgs)
  async sensorMeasurements(
    @common.Req() request: Request
  ): Promise<SensorMeasurement[]> {
    const args = plainToClass(SensorMeasurementFindManyArgs, request.query);
    return this.service.sensorMeasurements({
      ...args,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SensorMeasurement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sensorMeasurement(
    @common.Param() params: SensorMeasurementWhereUniqueInput
  ): Promise<SensorMeasurement | null> {
    const result = await this.service.sensorMeasurement({
      where: params,
      select: {
        createdAt: true,
        id: true,

        sensor: {
          select: {
            id: true,
          },
        },

        timestamp: true,
        typeField: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SensorMeasurement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSensorMeasurement(
    @common.Param() params: SensorMeasurementWhereUniqueInput,
    @common.Body() data: SensorMeasurementUpdateInput
  ): Promise<SensorMeasurement | null> {
    try {
      return await this.service.updateSensorMeasurement({
        where: params,
        data: {
          ...data,

          sensor: data.sensor
            ? {
                connect: data.sensor,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SensorMeasurement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSensorMeasurement(
    @common.Param() params: SensorMeasurementWhereUniqueInput
  ): Promise<SensorMeasurement | null> {
    try {
      return await this.service.deleteSensorMeasurement({
        where: params,
        select: {
          createdAt: true,
          id: true,

          sensor: {
            select: {
              id: true,
            },
          },

          timestamp: true,
          typeField: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
