/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Configuration as PrismaConfiguration,
  Device as PrismaDevice,
} from "@prisma/client";

export class ConfigurationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ConfigurationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.configuration.count(args);
  }

  async configurations<T extends Prisma.ConfigurationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConfigurationFindManyArgs>
  ): Promise<PrismaConfiguration[]> {
    return this.prisma.configuration.findMany<Prisma.ConfigurationFindManyArgs>(
      args
    );
  }
  async configuration<T extends Prisma.ConfigurationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConfigurationFindUniqueArgs>
  ): Promise<PrismaConfiguration | null> {
    return this.prisma.configuration.findUnique(args);
  }
  async createConfiguration<T extends Prisma.ConfigurationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConfigurationCreateArgs>
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.create<T>(args);
  }
  async updateConfiguration<T extends Prisma.ConfigurationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConfigurationUpdateArgs>
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.update<T>(args);
  }
  async deleteConfiguration<T extends Prisma.ConfigurationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ConfigurationDeleteArgs>
  ): Promise<PrismaConfiguration> {
    return this.prisma.configuration.delete(args);
  }

  async getDevice(parentId: string): Promise<PrismaDevice | null> {
    return this.prisma.configuration
      .findUnique({
        where: { id: parentId },
      })
      .device();
  }
  async SendDeviceConfiguration(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
