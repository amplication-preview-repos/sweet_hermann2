/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Farm as PrismaFarm,
  Greenhouse as PrismaGreenhouse,
  User as PrismaUser,
} from "@prisma/client";

export class FarmServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FarmCountArgs, "select">): Promise<number> {
    return this.prisma.farm.count(args);
  }

  async farms<T extends Prisma.FarmFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmFindManyArgs>
  ): Promise<PrismaFarm[]> {
    return this.prisma.farm.findMany<Prisma.FarmFindManyArgs>(args);
  }
  async farm<T extends Prisma.FarmFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmFindUniqueArgs>
  ): Promise<PrismaFarm | null> {
    return this.prisma.farm.findUnique(args);
  }
  async createFarm<T extends Prisma.FarmCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmCreateArgs>
  ): Promise<PrismaFarm> {
    return this.prisma.farm.create<T>(args);
  }
  async updateFarm<T extends Prisma.FarmUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmUpdateArgs>
  ): Promise<PrismaFarm> {
    return this.prisma.farm.update<T>(args);
  }
  async deleteFarm<T extends Prisma.FarmDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FarmDeleteArgs>
  ): Promise<PrismaFarm> {
    return this.prisma.farm.delete(args);
  }

  async findGreenhouses(
    parentId: string,
    args: Prisma.GreenhouseFindManyArgs
  ): Promise<PrismaGreenhouse[]> {
    return this.prisma.farm
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .greenhouses(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.farm
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
