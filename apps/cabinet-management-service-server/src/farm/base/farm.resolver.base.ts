/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Farm } from "./Farm";
import { FarmCountArgs } from "./FarmCountArgs";
import { FarmFindManyArgs } from "./FarmFindManyArgs";
import { FarmFindUniqueArgs } from "./FarmFindUniqueArgs";
import { CreateFarmArgs } from "./CreateFarmArgs";
import { UpdateFarmArgs } from "./UpdateFarmArgs";
import { DeleteFarmArgs } from "./DeleteFarmArgs";
import { GreenhouseFindManyArgs } from "../../greenhouse/base/GreenhouseFindManyArgs";
import { Greenhouse } from "../../greenhouse/base/Greenhouse";
import { User } from "../../user/base/User";
import { FarmService } from "../farm.service";
@graphql.Resolver(() => Farm)
export class FarmResolverBase {
  constructor(protected readonly service: FarmService) {}

  async _farmsMeta(
    @graphql.Args() args: FarmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Farm])
  async farms(@graphql.Args() args: FarmFindManyArgs): Promise<Farm[]> {
    return this.service.farms(args);
  }

  @graphql.Query(() => Farm, { nullable: true })
  async farm(@graphql.Args() args: FarmFindUniqueArgs): Promise<Farm | null> {
    const result = await this.service.farm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Farm)
  async createFarm(@graphql.Args() args: CreateFarmArgs): Promise<Farm> {
    return await this.service.createFarm({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Farm)
  async updateFarm(@graphql.Args() args: UpdateFarmArgs): Promise<Farm | null> {
    try {
      return await this.service.updateFarm({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Farm)
  async deleteFarm(@graphql.Args() args: DeleteFarmArgs): Promise<Farm | null> {
    try {
      return await this.service.deleteFarm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Greenhouse], { name: "greenhouses" })
  async findGreenhouses(
    @graphql.Parent() parent: Farm,
    @graphql.Args() args: GreenhouseFindManyArgs
  ): Promise<Greenhouse[]> {
    const results = await this.service.findGreenhouses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Farm): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
