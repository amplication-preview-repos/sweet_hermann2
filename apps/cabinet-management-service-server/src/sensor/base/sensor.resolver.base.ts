/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Sensor } from "./Sensor";
import { SensorCountArgs } from "./SensorCountArgs";
import { SensorFindManyArgs } from "./SensorFindManyArgs";
import { SensorFindUniqueArgs } from "./SensorFindUniqueArgs";
import { CreateSensorArgs } from "./CreateSensorArgs";
import { UpdateSensorArgs } from "./UpdateSensorArgs";
import { DeleteSensorArgs } from "./DeleteSensorArgs";
import { SensorMeasurementFindManyArgs } from "../../sensorMeasurement/base/SensorMeasurementFindManyArgs";
import { SensorMeasurement } from "../../sensorMeasurement/base/SensorMeasurement";
import { Device } from "../../device/base/Device";
import { SensorService } from "../sensor.service";
@graphql.Resolver(() => Sensor)
export class SensorResolverBase {
  constructor(protected readonly service: SensorService) {}

  async _sensorsMeta(
    @graphql.Args() args: SensorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Sensor])
  async sensors(@graphql.Args() args: SensorFindManyArgs): Promise<Sensor[]> {
    return this.service.sensors(args);
  }

  @graphql.Query(() => Sensor, { nullable: true })
  async sensor(
    @graphql.Args() args: SensorFindUniqueArgs
  ): Promise<Sensor | null> {
    const result = await this.service.sensor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Sensor)
  async createSensor(@graphql.Args() args: CreateSensorArgs): Promise<Sensor> {
    return await this.service.createSensor({
      ...args,
      data: {
        ...args.data,

        device: args.data.device
          ? {
              connect: args.data.device,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Sensor)
  async updateSensor(
    @graphql.Args() args: UpdateSensorArgs
  ): Promise<Sensor | null> {
    try {
      return await this.service.updateSensor({
        ...args,
        data: {
          ...args.data,

          device: args.data.device
            ? {
                connect: args.data.device,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sensor)
  async deleteSensor(
    @graphql.Args() args: DeleteSensorArgs
  ): Promise<Sensor | null> {
    try {
      return await this.service.deleteSensor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [SensorMeasurement], {
    name: "sensorMeasurements",
  })
  async findSensorMeasurements(
    @graphql.Parent() parent: Sensor,
    @graphql.Args() args: SensorMeasurementFindManyArgs
  ): Promise<SensorMeasurement[]> {
    const results = await this.service.findSensorMeasurements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Device, {
    nullable: true,
    name: "device",
  })
  async getDevice(@graphql.Parent() parent: Sensor): Promise<Device | null> {
    const result = await this.service.getDevice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
